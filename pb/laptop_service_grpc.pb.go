// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: laptop_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaptopServiceClient is the client API for LaptopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaptopServiceClient interface {
	CreateLaptop(ctx context.Context, in *ResponseRequestLaptop, opts ...grpc.CallOption) (*ResponseRequestByID, error)
	GetLaptopByID(ctx context.Context, in *ResponseRequestByID, opts ...grpc.CallOption) (*ResponseRequestLaptop, error)
	GetAllLaptop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponsesLaptop, error)
	DeleteLaptopByID(ctx context.Context, in *ResponseRequestByID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSearchByFilter(ctx context.Context, in *RequestSearchByFilter, opts ...grpc.CallOption) (LaptopService_GetSearchByFilterClient, error)
}

type laptopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaptopServiceClient(cc grpc.ClientConnInterface) LaptopServiceClient {
	return &laptopServiceClient{cc}
}

func (c *laptopServiceClient) CreateLaptop(ctx context.Context, in *ResponseRequestLaptop, opts ...grpc.CallOption) (*ResponseRequestByID, error) {
	out := new(ResponseRequestByID)
	err := c.cc.Invoke(ctx, "/LaptopService/CreateLaptop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptopServiceClient) GetLaptopByID(ctx context.Context, in *ResponseRequestByID, opts ...grpc.CallOption) (*ResponseRequestLaptop, error) {
	out := new(ResponseRequestLaptop)
	err := c.cc.Invoke(ctx, "/LaptopService/GetLaptopByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptopServiceClient) GetAllLaptop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponsesLaptop, error) {
	out := new(ResponsesLaptop)
	err := c.cc.Invoke(ctx, "/LaptopService/GetAllLaptop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptopServiceClient) DeleteLaptopByID(ctx context.Context, in *ResponseRequestByID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/LaptopService/DeleteLaptopByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptopServiceClient) GetSearchByFilter(ctx context.Context, in *RequestSearchByFilter, opts ...grpc.CallOption) (LaptopService_GetSearchByFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &LaptopService_ServiceDesc.Streams[0], "/LaptopService/GetSearchByFilter", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptopServiceGetSearchByFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LaptopService_GetSearchByFilterClient interface {
	Recv() (*ResponseRequestLaptop, error)
	grpc.ClientStream
}

type laptopServiceGetSearchByFilterClient struct {
	grpc.ClientStream
}

func (x *laptopServiceGetSearchByFilterClient) Recv() (*ResponseRequestLaptop, error) {
	m := new(ResponseRequestLaptop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaptopServiceServer is the server API for LaptopService service.
// All implementations must embed UnimplementedLaptopServiceServer
// for forward compatibility
type LaptopServiceServer interface {
	CreateLaptop(context.Context, *ResponseRequestLaptop) (*ResponseRequestByID, error)
	GetLaptopByID(context.Context, *ResponseRequestByID) (*ResponseRequestLaptop, error)
	GetAllLaptop(context.Context, *emptypb.Empty) (*ResponsesLaptop, error)
	DeleteLaptopByID(context.Context, *ResponseRequestByID) (*emptypb.Empty, error)
	GetSearchByFilter(*RequestSearchByFilter, LaptopService_GetSearchByFilterServer) error
	mustEmbedUnimplementedLaptopServiceServer()
}

// UnimplementedLaptopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLaptopServiceServer struct {
}

func (UnimplementedLaptopServiceServer) CreateLaptop(context.Context, *ResponseRequestLaptop) (*ResponseRequestByID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaptop not implemented")
}
func (UnimplementedLaptopServiceServer) GetLaptopByID(context.Context, *ResponseRequestByID) (*ResponseRequestLaptop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaptopByID not implemented")
}
func (UnimplementedLaptopServiceServer) GetAllLaptop(context.Context, *emptypb.Empty) (*ResponsesLaptop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLaptop not implemented")
}
func (UnimplementedLaptopServiceServer) DeleteLaptopByID(context.Context, *ResponseRequestByID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLaptopByID not implemented")
}
func (UnimplementedLaptopServiceServer) GetSearchByFilter(*RequestSearchByFilter, LaptopService_GetSearchByFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSearchByFilter not implemented")
}
func (UnimplementedLaptopServiceServer) mustEmbedUnimplementedLaptopServiceServer() {}

// UnsafeLaptopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaptopServiceServer will
// result in compilation errors.
type UnsafeLaptopServiceServer interface {
	mustEmbedUnimplementedLaptopServiceServer()
}

func RegisterLaptopServiceServer(s grpc.ServiceRegistrar, srv LaptopServiceServer) {
	s.RegisterService(&LaptopService_ServiceDesc, srv)
}

func _LaptopService_CreateLaptop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseRequestLaptop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServiceServer).CreateLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaptopService/CreateLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServiceServer).CreateLaptop(ctx, req.(*ResponseRequestLaptop))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptopService_GetLaptopByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseRequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServiceServer).GetLaptopByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaptopService/GetLaptopByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServiceServer).GetLaptopByID(ctx, req.(*ResponseRequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptopService_GetAllLaptop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServiceServer).GetAllLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaptopService/GetAllLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServiceServer).GetAllLaptop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptopService_DeleteLaptopByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseRequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServiceServer).DeleteLaptopByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaptopService/DeleteLaptopByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServiceServer).DeleteLaptopByID(ctx, req.(*ResponseRequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptopService_GetSearchByFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestSearchByFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LaptopServiceServer).GetSearchByFilter(m, &laptopServiceGetSearchByFilterServer{stream})
}

type LaptopService_GetSearchByFilterServer interface {
	Send(*ResponseRequestLaptop) error
	grpc.ServerStream
}

type laptopServiceGetSearchByFilterServer struct {
	grpc.ServerStream
}

func (x *laptopServiceGetSearchByFilterServer) Send(m *ResponseRequestLaptop) error {
	return x.ServerStream.SendMsg(m)
}

// LaptopService_ServiceDesc is the grpc.ServiceDesc for LaptopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaptopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LaptopService",
	HandlerType: (*LaptopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaptop",
			Handler:    _LaptopService_CreateLaptop_Handler,
		},
		{
			MethodName: "GetLaptopByID",
			Handler:    _LaptopService_GetLaptopByID_Handler,
		},
		{
			MethodName: "GetAllLaptop",
			Handler:    _LaptopService_GetAllLaptop_Handler,
		},
		{
			MethodName: "DeleteLaptopByID",
			Handler:    _LaptopService_DeleteLaptopByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSearchByFilter",
			Handler:       _LaptopService_GetSearchByFilter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "laptop_service.proto",
}
